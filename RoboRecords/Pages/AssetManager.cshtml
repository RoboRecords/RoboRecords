@page
@model RoboRecords.Pages.AssetManager
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery _antiforgery

<!--
 AssetManager.cshtml: Frontend of the Asset Manager website's page
 Copyright (C) 2022, Ors <Riku-S> and Refrag <Refragg>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 See the 'LICENSE' file for more details.
-->

@{
    ViewData["Title"] = "Asset Manager";
    var requestToken = _antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
}

<input id="__AntiforgeryToken" type="hidden" value="@requestToken" />

<script type="text/javascript">
    var games
    var characters
    
    var siteAssets
    var newSiteAssets = []
    var deletedSiteAssets = []
    var editedSiteAssets = []
    
    var gameAssets
    var newGameAssets = []
    var deletedGameAssets = []
    var editedGameAssets = []
    
    var characterAssets
    var newCharacterAssets = []
    var deletedCharacterAssets = []
    var editedCharacterAssets = []
    
    var assetAddInputElementValid = false
    var assetAddImagePresent = false
    
    window.onload = function() {
        $.ajax({
            type: 'GET',
            url: '?handler=Games',
            headers: {
                "RequestVerificationToken": getToken()
            },
            success: function (data) {
                games = data
                
                var gamesSelectionElement = get("gamesSelection")
                        
                for (var index in games) {
                    var element = document.createElement("option")
                    element.setAttribute("value", games[index].id)
                    element.textContent = games[index].name
                    gamesSelectionElement.appendChild(element)
                }
            },
            error: function (error) {
                alert("Error getting the games")
            }
        })
        
        $.ajax({
            type: 'GET',
            url: '?handler=Characters',
            headers: {
                "RequestVerificationToken": getToken()
            },
            success: function (data) {
                characters = data
                
                var characterSelectionElement = get("charactersSelection")
                        
                for (var index in characters) {
                    var element = document.createElement("option")
                    element.setAttribute("value", characters[index].id) 
                    element.textContent = characters[index].name
                    characterSelectionElement.appendChild(element)
                }
            },
            error: function (error) {
                alert("Error getting the characters")
            }
        })
        
        refreshSiteAssetsView()
    }

    function getToken() {
        return get("__AntiforgeryToken").value
    }

    function get(elementIdString) {
        return document.getElementById(elementIdString)
    }
    
    function getAssetFullPath(asset) {
        
        if (asset.character)
            return "@FileManager.NewAssetsDirectoryName/@FileManager.CharactersAssetsDirectoryName/" + asset.id + "." + asset.fileExtension
        else if (asset.game)
            return "@FileManager.NewAssetsDirectoryName/@FileManager.GamesAssetsDirectoryName/" + asset.id + "." + asset.fileExtension
        else
            return "@FileManager.NewAssetsDirectoryName/@FileManager.SiteAssetsDirectoryName/" + asset.id + "." + asset.fileExtension
        
    }
    
    function getActiveTab() {
        var siteTab = get("siteTab")
        var gamesTab = get("gamesTab")
        var charactersTab = get("charactersTab")
        
        if (get("siteNavLink").getAttribute("class").includes("active"))
            return siteTab
        else if (get("gamesNavLink").getAttribute("class").includes("active"))
            return gamesTab
        else
            return charactersTab
    }
    
    function handleTabClick(element) {
        var siteTab = get("siteTab")
        var gamesTab = get("gamesTab")
        var charactersTab = get("charactersTab")
        
        var gamesSelection = get("gamesSelection")
        var charactersSelection = get("charactersSelection")
        
        get("siteNavLink").setAttribute("class", "nav-link")
        siteTab.setAttribute("style", "display: none")
        get("gamesNavLink").setAttribute("class", "nav-link")
        gamesTab.setAttribute("style", "display: none")
        get("charactersNavLink").setAttribute("class", "nav-link")
        charactersTab.setAttribute("style", "display: none")
        
        gamesSelection.setAttribute("style", "display: none")
        charactersSelection.setAttribute("style", "display: none")
        
        element.setAttribute("class", "nav-link active")
        switch (element.id)
        {
            case "siteNavLink":
                refreshSiteAssetsView()
                siteTab.removeAttribute("style")
                break;
            case "gamesNavLink":
                refreshGameAssetsView(gamesSelection)
                gamesTab.removeAttribute("style")
                gamesSelection.removeAttribute("style")
                break;
            case "charactersNavLink":
                refreshCharacterAssetsView(charactersSelection)
                charactersTab.removeAttribute("style")
                charactersSelection.removeAttribute("style")
                break;
        }
    }
    
    function getAssetFromElement(assetElement)
    {
        var splittedId = assetElement.id.split('-')
        
        var index = parseInt(splittedId[1])
        
        switch (splittedId[0])
        {
            case "newSiteAsset":
                return newSiteAssets[index]
            case "siteAsset":
                return siteAssets[index]
                
            case "newGameAsset":
                return newGameAssets[index]
            case "gameAsset":
                return gameAssets[index]
                
            case "newCharacterAsset":
                return newCharacterAssets[index]
            case "characterAsset":
                return characterAssets[index]
        }
    }
    
    function addAssetToTab(asset, assetHtmlId, tabElement, assetImagePath = undefined) {
        var div = document.createElement("div")
        div.setAttribute("class", "assetmanager-asset")
        div.setAttribute("id", assetHtmlId)
        
        div.addEventListener("mouseover", function (e) { e.currentTarget.setAttribute("class", "assetmanager-asset asset-hovered") })
        div.addEventListener("mouseout", function (e) { e.currentTarget.setAttribute("class", "assetmanager-asset") })
        
        div.addEventListener("click", function (e) { handleAssetClick(e.currentTarget) })
        
        var imageContainer = document.createElement("div")
        imageContainer.setAttribute("class", "assetmanager-asset-image-container")
        
        var imageElement = document.createElement("img")
        if (assetImagePath)
            imageElement.setAttribute("src", assetImagePath)
        else
            imageElement.setAttribute("src", getAssetFullPath(asset))
        imageElement.setAttribute("class", "assetmanager-asset-image img-fluid")
        
        imageContainer.appendChild(imageElement)
        
        var labelElement = document.createElement("p")
        labelElement.setAttribute("class", "assetmanager-asset-text")
        labelElement.innerText = asset.name
        
        div.appendChild(imageContainer)
        div.appendChild(labelElement)
        
        tabElement.appendChild(div)
    }
    
    function handleAssetClick(assetElement) {
        var asset = getAssetFromElement(assetElement)
        
        console.log("clicked on " + asset.name)
    }
    
    function refreshSiteAssetsView() {
        var contentElement = get("siteTabContent")
        for (let i = contentElement.children.length - 1; i >= 0; i--) {
            contentElement.children[i].remove()
        }
        
        $.ajax({
            type: 'GET',
            url: '?handler=SiteAssets',
            headers: {
                "RequestVerificationToken": getToken()
            },
            success: function (data) {
                siteAssets = data
                
                for (var index in siteAssets) {
                    addAssetToTab(siteAssets[index], "siteAsset-" + index, contentElement)
                }
                for (index in newSiteAssets) {
                    var asset = newSiteAssets[index]
                    addAssetToTab(asset, "newCharacterAsset-" + index, contentElement, asset.localPath)
                }
            },
            error: function (error) {
                alert("Error getting the site assets")
            }
        })
    }
    
    function refreshGameAssetsView(element) {
        var contentElement = get("gamesTabContent")
        for (let i = contentElement.children.length - 1; i >= 0; i--) {
            contentElement.children[i].remove()
        }
        
        $.ajax({
            type: 'GET',
            url: '?handler=GameAssets&id=' + element.value,
            headers: {
                "RequestVerificationToken": getToken()
            },
            success: function (data) {
                gameAssets = data
                                
                for (var index in gameAssets) {
                    addAssetToTab(gameAssets[index], "gameAsset-" + index, contentElement)
                }
                for (index in newGameAssets) {
                    var asset = newGameAssets[index]
                    addAssetToTab(asset, "newCharacterAsset-" + index, contentElement, asset.localPath)
                }
            },
            error: function (error) {
                alert("Error getting the assets for this game")
            }
        })
    }
    
    function refreshCharacterAssetsView(element) {
        var contentElement = get("charactersTabContent")
        for (let i = contentElement.children.length - 1; i >= 0; i--) {
            contentElement.children[i].remove()
        }
        
        $.ajax({
            type: 'GET',
            url: '?handler=CharacterAssets&id=' + element.value,
            headers: {
                "RequestVerificationToken": getToken()
            },
            success: function (data) {
                characterAssets = data
                                
                for (var index in characterAssets) {
                    addAssetToTab(characterAssets[index], "characterAsset-" + index, contentElement)
                }
                for (index in newCharacterAssets) {
                    var asset = newCharacterAssets[index]
                    addAssetToTab(asset, "newCharacterAsset-" + index, contentElement, asset.localPath)
                }
            },
            error: function (error) {
                alert("Error getting the assets for this character")
            }
        })
    }
    
    function assetNameOnChange(inputElement) {
        if (inputElement.value) {
            inputElement.setAttribute("class", "form-control is-valid")
            assetAddInputElementValid = true
        }
        else {
            inputElement.setAttribute("class", "form-control is-invalid")
            assetAddInputElementValid = false
        }
        updateAddButton()
    }
    
    function inputFileOnChange(fileInputElement) {
        if (fileInputElement.files.length !== 0) {
            get("imagePreview").src = URL.createObjectURL(fileInputElement.files[0])
            assetAddImagePresent = true
        }
        else {
            assetAddImagePresent = false
        }
        updateAddButton()
    }
    
    function updateAddButton() {        
        var addButton = get("assetAddButton")
        
        if (assetAddInputElementValid && assetAddImagePresent) {
            addButton.removeAttribute("disabled")
        }
        else {
            addButton.setAttribute("disabled", "")
        }
    }
    
    function confirmAssetAdd(inputElement, fileInputElement) {
        var asset = {
            name: inputElement.value,
            localPath: URL.createObjectURL(fileInputElement.files[0])
        }
        switch (getActiveTab().id)
        {
            case "siteTab":
                var index = newSiteAssets.push(asset) - 1
                var contentElement = get("siteTabContent")
                addAssetToTab(asset, "newSiteAsset-" + index, contentElement, asset.localPath)
                break
            case "gamesTab":
                asset.game = true
                index = newGameAssets.push(asset) - 1
                contentElement = get("gamesTabContent")
                addAssetToTab(asset, "newGameAsset-" + index, contentElement, asset.localPath)
                break
            case "charactersTab":
                asset.character = true
                index = newCharacterAssets.push(asset) - 1
                contentElement = get("charactersTabContent")
                addAssetToTab(asset, "newCharacterAsset-" + index, contentElement, asset.localPath)
                break
        }
    }
    
    function resetAssetAddModal() {
        var imagePreview = get("imagePreview")
        var addButton = get("assetAddButton")
        var inputElement = get("assetNameInput")
        
        imagePreview.src = "@FileManager.AssetsDirectoryName/guest.png"
        
        addButton.setAttribute("disabled", "")
        
        inputElement.value = "";
        inputElement.setAttribute("class", "form-control")
        
        assetAddImagePresent = false
        assetAddInputElementValid = false
    }
    
    function cancelAssetAdd() {
        console.log("cancel")
    }
    
    function handleGamesSelectionChange(element) {
        refreshGameAssetsView(element)
    }
    
    function handleCharactersSelectionChange(element) {
        refreshCharacterAssetsView(element)
    }
    
    function handleSiteAssetAddClick() {
        resetAssetAddModal()
        $('#assetAddModal').modal()
    }
    
    function handleSiteAssetSelectClick() {
            
    }

    function handleGameAssetAddClick() {
        resetAssetAddModal()
        $('#assetAddModal').modal()
    }
    
    function handleGameAssetSelectClick() {
            
    }
    
    function handleCharacterAssetAddClick() {
        resetAssetAddModal()
        $('#assetAddModal').modal()
    }
    
    function handleCharacterAssetSelectClick() {
            
    }
    
</script>

<div class="modal fade" id="assetAddModal" tabindex="-1" role="dialog" aria-labelledby="assetAddModalTitleText" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #303030">
                <h5 class="modal-title" id="assetAddModalTitleText">Add an asset</h5>
                <button onclick="cancelAssetAdd()" type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div id="assetAddModalBody" class="modal-body text-center" style="margin: 0; background-color: #303030">
                <img class="img-thumbnail rounded assetmanager-add-preview" src="@FileManager.AssetsDirectoryName/guest.png" id="imagePreview" alt="Image preview" />
                
                <br/>
                <input class="form-control-file" onchange="inputFileOnChange(get('fileInput'))" id="fileInput" type="file" accept="image/*" style="display: flex; text-align: center" />
                <br/>
                <br/>
                <div style="display: flex">
                    <label for="assetNameInput" style="width: 270px; height: 38px; line-height: 38px; padding: 0;">Asset name:</label>
                    <input oninput="assetNameOnChange(get('assetNameInput'))" onchange="assetNameOnChange(get('assetNameInput'))" class="form-control" id="assetNameInput" />
                </div>
            </div>
            <div class="modal-footer" style="background-color: #303030">
                <button onclick="confirmAssetAdd(get('assetNameInput'), get('fileInput'))" id="assetAddButton" type="button" class="btn btn-primary" data-dismiss="modal" disabled >Add</button>
                <button onclick="cancelAssetAdd()" type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="text-center">
    <h1 class="">Asset Manager</h1>
    <h2 class="lead">Manage the assets for the website and the games</h2>
</div>

<div class="flex-container" style="position: relative">
    <ul class="left-element nav nav-tabs" style="border-top-right-radius: 10px; border-top-left-radius: 10px; width: fit-content; background: rgba(0, 0, 0, 0.45); position: center">
        <li class="nav-item">
            <a class="nav-link active" id="siteNavLink" onclick="handleTabClick(get('siteNavLink'))" href="#">Site</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="gamesNavLink" onclick="handleTabClick(get('gamesNavLink'))" href="#">Games</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="charactersNavLink" onclick="handleTabClick(get('charactersNavLink'))" href="#">Characters</a>
        </li>
    </ul>
    <div class="right-element">
        <select onchange="handleGamesSelectionChange(get('gamesSelection'))" id="gamesSelection" class="custom-select" style="display: none">
            <!-- The options will be filled out by the script when the page loads -->
        </select>
        <select onchange="handleCharactersSelectionChange(get('charactersSelection'))" id="charactersSelection" class="custom-select" style="display: none">
            <!-- The options will be filled out by the script when the page loads -->
        </select>
    </div>
</div>

<div class="assetmanager-tab-content" id="siteTab">
    <div class="container assetmanager-assets-list" id="siteTabContent">
        <!-- This will be filled when the tab is selected -->
    </div>
    <div class="bottom-left-with-padding">
        <button onclick="handleSiteAssetAddClick()" class="btn btn-success btn-lg">+</button>
        <button onclick="handleSiteAssetSelectClick()" class="btn btn-info btn-lg">Select</button>
    </div>
    <div class="bottom-right-with-padding">
        <button class="btn btn-primary btn-lg">Save</button>
        <button class="btn btn-secondary btn-lg">Revert</button>
    </div>
</div>
<div class="assetmanager-tab-content" id="gamesTab" style="display: none">
    <div class="container assetmanager-assets-list" id="gamesTabContent">
        <!-- This will be filled when the tab is selected -->
    </div>
    <div class="bottom-left-with-padding">
        <button onclick="handleGameAssetAddClick()" class="btn btn-success btn-lg">+</button>
        <button onclick="handleGameAssetSelectClick()" class="btn btn-info btn-lg">Select</button>
    </div>
    <div class="bottom-right-with-padding">
        <button class="btn btn-primary btn-lg">Save Game</button>
        <button class="btn btn-secondary btn-lg">Revert Game</button>
    </div>
</div>
<div class="assetmanager-tab-content" id="charactersTab" style="display: none">
    <div class="container assetmanager-assets-list" id="charactersTabContent">
        <!-- This will be filled when the tab is selected -->
    </div>
    <div class="bottom-left-with-padding">
        <button onclick="handleCharacterAssetAddClick()" class="btn btn-success btn-lg">+</button>
        <button onclick="handleCharacterAssetSelectClick()" class="btn btn-info btn-lg">Select</button>
    </div>
    <div class="bottom-right-with-padding">
        <button class="btn btn-primary btn-lg">Save Character</button>
        <button class="btn btn-secondary btn-lg">Revert Character</button>
    </div>
</div>

<style>
    .left-element {
        float: left;
    }
    
    .right-element {
        position: absolute;
        right: 0;
        float: right;
    }

    .bottom-left-with-padding {
        position: absolute;
        bottom: 2%;
        left: 2%;
    }

    .bottom-right-with-padding {
        position: absolute;
        bottom: 2%;
        right: 2%;
    }
    
    .img-thumbnail {
        background-color: #1b1bff;
        border: 0;
    }
    
    .assetmanager-add-preview {
        
        margin-left: auto;
        margin-right: auto;
        display: block;
        width: auto;
        height: 200px;
    }

    .assetmanager-tab-content {
        border-top-right-radius: 10px;
        border-bottom-right-radius: 10px;
        border-bottom-left-radius: 10px;
        width: 100%; height: 80%;
        background: rgba(0, 0, 0, 0.45);
        position: relative;
    }
    
    /* FIXME: WARNING!!! This is some serious css magic happening for this to render properly.....
       Fix this mess at some point */
    
    .assetmanager-assets-list {
        width: 95%;
        overflow-y: auto;
        padding-top: 10px;
        padding-bottom: 20px;
    }
    
    .assetmanager-asset {
        width: 200px;
        height: 195px;
        padding-inline: 15px;
        padding-top: 10px;
        display: inline-block;
    }
    
    .asset-hovered {
        background: rgba(0, 50, 170, 255); /* TODO: Figure out a way to have some transparency; changing the alpha value doesn't seem to do anything here*/
    }
    
    .assetmanager-asset-image-container {
        position: relative;
        width: 100%;
        height: 62px;
    }
    
    .assetmanager-asset-image {
        position: absolute;
        image-rendering: crisp-edges;
        margin: auto;
        top: 100%;
        left: 0;
        right: 0;
        bottom: 0;
        width: auto;
        height: auto;
        max-height: 132px;
    }
    
    .assetmanager-asset-text {
        position: relative;
        top: 36%;
        overflow: hidden;
        overflow-wrap: anywhere;
        text-overflow: ellipsis;
        font-size: 14px;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        text-align: center;
    }

    .container {
        height: 92%;
    }

    .pb-3 {
        height: 100%;
    }
    
    .nav-link {
        color: white !important;
    }
    
    .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active { 
        background-color: #000f92
    }

    body {
        background: linear-gradient( rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0.75) ), url('@FileManager.AssetsDirectoryName/images/vanillabg.png');
        background-size: 100%;
        background-repeat: no-repeat;
    }
</style>